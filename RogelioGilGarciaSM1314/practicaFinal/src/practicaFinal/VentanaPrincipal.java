package practicaFinal;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import static practicaFinal.Lienzo.BORDE;
import static practicaFinal.Lienzo.DEGRADADOH;
import static practicaFinal.Lienzo.DEGRADADOV;
import static practicaFinal.Lienzo.RELLENO;
import sm.image.KernelProducer;
import sm.image.ThresholdOp;
import sun.awt.image.SurfaceManager;

/**
 * Clase donde se implementará la interfaz del programa
 * @author Rogelio Gil García
 * @version 2.0
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private static int posX,posY;
    
    /**
     * Constructor sin parámetros de VentanaPrincial.
     * Se inicializa una ventana vacía de la clase <code>VentanaInterna</code>
     */
    public VentanaPrincipal() {
        initComponents();
        VentanaInterna vi = new VentanaInterna();
        vi.setTitle("Nueva");
        this.escritorio.add(vi);
        vi.setVisible(true);
        posX=posY=-20;
        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }
    
    /**
     * Indica la posición para la ventana y actualiza la posición 
     * para la siguiente.
     * @return <code>Point p</code>, punto para la ventana.
     */
    private Point posVentana(){
        posX+=20; posY=posX;
        Point p = new Point(posX,posY);   
        return p;
    }
    
    /**
     * Actualiza el fondo de los botones <code>colorBorde</code> o
     * <code>colorRelleno</code> dependiendo del qeu esté seleccionado.
     * @param c Color con el que se va a actualizar el fondo del botón.
     */
    private void updateColors(Color c){
        if(Lienzo.getSelectColor()==BORDE)
            colorBorde.setBackground(c);
        else
            colorRelleno.setBackground(c);
    }
    
    
    /**
     * Devuelve la extensión del fichero.
     * @param file, fichero del que devolveremos la extensión.
     * @return <code>(String)</code>, extensión del fichero.
     */
    private String getExtension(File file) {
        String name = file.getName();
        int lastIndexOf = name.lastIndexOf(".");
        if (lastIndexOf == -1) {
            return ""; // empty extension
        }
        return name.substring(lastIndexOf+1);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupo_herramientas_dibujo = new javax.swing.ButtonGroup();
        panel_inferior = new javax.swing.JPanel();
        pie = new javax.swing.JTextField();
        barraHerramientas = new javax.swing.JTabbedPane();
        herramientasDibujo = new javax.swing.JToolBar();
        contenedorDibujo = new javax.swing.JPanel();
        Colores = new javax.swing.JPanel();
        recuadro_colores = new javax.swing.JPanel();
        negro = new javax.swing.JButton();
        rojo = new javax.swing.JButton();
        azul = new javax.swing.JButton();
        blanco = new javax.swing.JButton();
        amarillo = new javax.swing.JButton();
        verde = new javax.swing.JButton();
        masColores = new javax.swing.JPanel();
        colorRellenoBorde = new javax.swing.JLayeredPane();
        colorRelleno = new javax.swing.JButton();
        colorBorde = new javax.swing.JButton();
        colores = new javax.swing.JButton();
        opciones_pintado = new javax.swing.JPanel();
        editar = new javax.swing.JCheckBox();
        trazo = new javax.swing.JPanel();
        textGrosor = new javax.swing.JLabel();
        grosor = new javax.swing.JSpinner();
        estiloTrazo = new javax.swing.JComboBox();
        contenedorRelleno = new javax.swing.JPanel();
        relleno = new javax.swing.JComboBox();
        herramientasImagen = new javax.swing.JToolBar();
        contenedorImagen = new javax.swing.JPanel();
        Contraste = new javax.swing.JPanel();
        contraste = new javax.swing.JButton();
        iluminar = new javax.swing.JButton();
        oscurecer = new javax.swing.JButton();
        Rotación = new javax.swing.JPanel();
        rotacion = new javax.swing.JSlider();
        rotacion90 = new javax.swing.JButton();
        rotacion180 = new javax.swing.JButton();
        rotacion270 = new javax.swing.JButton();
        Escala = new javax.swing.JPanel();
        aumentar = new javax.swing.JButton();
        disminuir = new javax.swing.JButton();
        Brillo = new javax.swing.JPanel();
        brillo = new javax.swing.JSlider();
        Umbralizacion = new javax.swing.JPanel();
        cUmbralizacionGris = new javax.swing.JPanel();
        umbralGris = new javax.swing.JSlider();
        cUmbralizacionColor = new javax.swing.JPanel();
        umbralColor = new javax.swing.JSlider();
        escritorio = new javax.swing.JDesktopPane();
        panel_superior = new javax.swing.JPanel();
        herramientasGeneral = new javax.swing.JToolBar();
        abrirMedio = new javax.swing.JButton();
        grabarSonido2 = new javax.swing.JButton();
        webcam = new javax.swing.JButton();
        captura = new javax.swing.JButton();
        herramientasFiguras = new javax.swing.JToolBar();
        punto = new javax.swing.JToggleButton();
        linea = new javax.swing.JToggleButton();
        rectángulo = new javax.swing.JToggleButton();
        óvalo = new javax.swing.JToggleButton();
        curva = new javax.swing.JToggleButton();
        rectanguloRedondeado = new javax.swing.JToggleButton();
        Menu = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        nuevo = new javax.swing.JMenuItem();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        grabarSonido = new javax.swing.JMenuItem();
        camara = new javax.swing.JMenuItem();
        Ver = new javax.swing.JMenu();
        verDibujo = new javax.swing.JCheckBoxMenuItem();
        verImagen = new javax.swing.JCheckBoxMenuItem();
        Imagen = new javax.swing.JMenu();
        duplicar = new javax.swing.JMenuItem();
        separadorImagen = new javax.swing.JPopupMenu.Separator();
        negativo = new javax.swing.JMenuItem();
        nivelesGris = new javax.swing.JMenuItem();
        Filtro = new javax.swing.JMenu();
        media = new javax.swing.JMenuItem();
        binomial = new javax.swing.JMenuItem();
        enfoque = new javax.swing.JMenuItem();
        relieve = new javax.swing.JMenuItem();
        laplaciano = new javax.swing.JMenuItem();
        sobel = new javax.swing.JMenuItem();
        contornoLapiz = new javax.swing.JMenuItem();
        entramadoLapiz = new javax.swing.JMenuItem();
        Ayuda = new javax.swing.JMenu();
        acercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel_inferior.setMaximumSize(new java.awt.Dimension(2147483647, 120));
        panel_inferior.setMinimumSize(new java.awt.Dimension(587, 220));
        panel_inferior.setName(""); // NOI18N
        panel_inferior.setPreferredSize(new java.awt.Dimension(587, 180));
        panel_inferior.setRequestFocusEnabled(false);
        panel_inferior.setLayout(new java.awt.BorderLayout());

        pie.setBackground(new java.awt.Color(240, 240, 240));
        pie.setText("Punto");
        panel_inferior.add(pie, java.awt.BorderLayout.SOUTH);

        herramientasDibujo.setFloatable(false);
        herramientasDibujo.setRollover(true);

        Colores.setToolTipText("Colores");
        Colores.setMaximumSize(new java.awt.Dimension(102, 97));
        Colores.setMinimumSize(new java.awt.Dimension(102, 97));
        Colores.setName("Colores"); // NOI18N
        Colores.setPreferredSize(new java.awt.Dimension(102, 97));

        recuadro_colores.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Colores básicos", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        recuadro_colores.setToolTipText("");
        recuadro_colores.setLayout(new java.awt.GridLayout(2, 3, 5, 5));

        negro.setBackground(new java.awt.Color(0, 0, 0));
        negro.setToolTipText("Negro");
        negro.setPreferredSize(new java.awt.Dimension(23, 23));
        negro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negroActionPerformed(evt);
            }
        });
        recuadro_colores.add(negro);

        rojo.setBackground(new java.awt.Color(255, 0, 0));
        rojo.setToolTipText("Rojo");
        rojo.setPreferredSize(new java.awt.Dimension(23, 23));
        rojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rojoActionPerformed(evt);
            }
        });
        recuadro_colores.add(rojo);

        azul.setBackground(new java.awt.Color(0, 0, 255));
        azul.setToolTipText("Azul");
        azul.setPreferredSize(new java.awt.Dimension(23, 23));
        azul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                azulActionPerformed(evt);
            }
        });
        recuadro_colores.add(azul);

        blanco.setBackground(new java.awt.Color(255, 255, 255));
        blanco.setToolTipText("Blanco");
        blanco.setPreferredSize(new java.awt.Dimension(23, 23));
        blanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blancoActionPerformed(evt);
            }
        });
        recuadro_colores.add(blanco);

        amarillo.setBackground(new java.awt.Color(255, 255, 0));
        amarillo.setToolTipText("Amarillo");
        amarillo.setPreferredSize(new java.awt.Dimension(23, 23));
        amarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amarilloActionPerformed(evt);
            }
        });
        recuadro_colores.add(amarillo);

        verde.setBackground(new java.awt.Color(0, 204, 51));
        verde.setToolTipText("Verde");
        verde.setPreferredSize(new java.awt.Dimension(23, 23));
        verde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verdeActionPerformed(evt);
            }
        });
        recuadro_colores.add(verde);

        javax.swing.GroupLayout masColoresLayout = new javax.swing.GroupLayout(masColores);
        masColores.setLayout(masColoresLayout);
        masColoresLayout.setHorizontalGroup(
            masColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 158, Short.MAX_VALUE)
        );
        masColoresLayout.setVerticalGroup(
            masColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 19, Short.MAX_VALUE)
        );

        colorRellenoBorde.setBorder(javax.swing.BorderFactory.createTitledBorder("Borde/Relleno"));

        colorRelleno.setBackground(new java.awt.Color(255, 255, 255));
        colorRelleno.setToolTipText("Color de relleno");
        colorRelleno.setPreferredSize(new java.awt.Dimension(23, 23));
        colorRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorRellenoActionPerformed(evt);
            }
        });
        colorRellenoBorde.add(colorRelleno);
        colorRelleno.setBounds(30, 30, 23, 23);

        colorBorde.setBackground(new java.awt.Color(0, 0, 0));
        colorBorde.setToolTipText("Color del borde");
        colorBorde.setPreferredSize(new java.awt.Dimension(23, 23));
        colorBorde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorBordeActionPerformed(evt);
            }
        });
        colorRellenoBorde.add(colorBorde);
        colorBorde.setBounds(20, 20, 23, 23);

        colores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/masColores2.jpg"))); // NOI18N
        colores.setToolTipText("Más colores...");
        colores.setPreferredSize(new java.awt.Dimension(23, 23));
        colores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coloresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ColoresLayout = new javax.swing.GroupLayout(Colores);
        Colores.setLayout(ColoresLayout);
        ColoresLayout.setHorizontalGroup(
            ColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ColoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ColoresLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(masColores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ColoresLayout.createSequentialGroup()
                        .addComponent(colorRellenoBorde)
                        .addGap(18, 18, 18)
                        .addComponent(recuadro_colores, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(ColoresLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(colores, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );
        ColoresLayout.setVerticalGroup(
            ColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ColoresLayout.createSequentialGroup()
                .addGroup(ColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recuadro_colores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorRellenoBorde))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colores, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108)
                .addComponent(masColores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        opciones_pintado.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones"));
        opciones_pintado.setMaximumSize(new java.awt.Dimension(102, 97));
        opciones_pintado.setMinimumSize(new java.awt.Dimension(102, 97));
        opciones_pintado.setPreferredSize(new java.awt.Dimension(102, 97));
        opciones_pintado.setLayout(new java.awt.GridLayout(2, 1, 5, 5));

        editar.setText("editar");
        editar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                editarStateChanged(evt);
            }
        });
        opciones_pintado.add(editar);

        trazo.setBorder(javax.swing.BorderFactory.createTitledBorder("Trazo"));
        trazo.setMaximumSize(new java.awt.Dimension(65, 97));
        trazo.setMinimumSize(new java.awt.Dimension(65, 97));
        trazo.setPreferredSize(new java.awt.Dimension(65, 97));

        textGrosor.setText("Grosor");

        grosor.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        grosor.setMaximumSize(new java.awt.Dimension(50, 25));
        grosor.setMinimumSize(new java.awt.Dimension(50, 25));
        grosor.setName("Grosor"); // NOI18N
        grosor.setPreferredSize(new java.awt.Dimension(50, 25));
        grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grosorStateChanged(evt);
            }
        });

        estiloTrazo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Continuo", "Discontinuo" }));
        estiloTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estiloTrazoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout trazoLayout = new javax.swing.GroupLayout(trazo);
        trazo.setLayout(trazoLayout);
        trazoLayout.setHorizontalGroup(
            trazoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trazoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(trazoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(estiloTrazo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(trazoLayout.createSequentialGroup()
                        .addComponent(textGrosor)
                        .addGap(5, 5, 5)
                        .addComponent(grosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );
        trazoLayout.setVerticalGroup(
            trazoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trazoLayout.createSequentialGroup()
                .addGroup(trazoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(trazoLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(textGrosor))
                    .addGroup(trazoLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(grosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(estiloTrazo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        contenedorRelleno.setBorder(javax.swing.BorderFactory.createTitledBorder("Relleno"));

        relleno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sin relleno", "Sólido", "Degradado Horizontal", "Degradado Vertical" }));
        relleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contenedorRellenoLayout = new javax.swing.GroupLayout(contenedorRelleno);
        contenedorRelleno.setLayout(contenedorRellenoLayout);
        contenedorRellenoLayout.setHorizontalGroup(
            contenedorRellenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorRellenoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(relleno, 0, 124, Short.MAX_VALUE)
                .addContainerGap())
        );
        contenedorRellenoLayout.setVerticalGroup(
            contenedorRellenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorRellenoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(relleno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout contenedorDibujoLayout = new javax.swing.GroupLayout(contenedorDibujo);
        contenedorDibujo.setLayout(contenedorDibujoLayout);
        contenedorDibujoLayout.setHorizontalGroup(
            contenedorDibujoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorDibujoLayout.createSequentialGroup()
                .addComponent(Colores, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(trazo, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedorRelleno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(opciones_pintado, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        contenedorDibujoLayout.setVerticalGroup(
            contenedorDibujoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contenedorDibujoLayout.createSequentialGroup()
                .addGroup(contenedorDibujoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Colores, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(trazo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(contenedorRelleno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(opciones_pintado, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        Colores.getAccessibleContext().setAccessibleName("colores");

        herramientasDibujo.add(contenedorDibujo);

        barraHerramientas.addTab("Dibujo", herramientasDibujo);

        herramientasImagen.setFloatable(false);
        herramientasImagen.setRollover(true);

        Contraste.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"));

        contraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosImagen/contraste.png"))); // NOI18N
        contraste.setToolTipText("Normal");
        contraste.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        contraste.setPreferredSize(new java.awt.Dimension(23, 23));
        contraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrasteActionPerformed(evt);
            }
        });

        iluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosImagen/iluminar.png"))); // NOI18N
        iluminar.setToolTipText("Iluminado");
        iluminar.setPreferredSize(new java.awt.Dimension(23, 23));
        iluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iluminarActionPerformed(evt);
            }
        });

        oscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosImagen/oscurecer.png"))); // NOI18N
        oscurecer.setToolTipText("Oscurecido");
        oscurecer.setPreferredSize(new java.awt.Dimension(23, 23));
        oscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscurecerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ContrasteLayout = new javax.swing.GroupLayout(Contraste);
        Contraste.setLayout(ContrasteLayout);
        ContrasteLayout.setHorizontalGroup(
            ContrasteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContrasteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contraste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(iluminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(oscurecer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        ContrasteLayout.setVerticalGroup(
            ContrasteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContrasteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContrasteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contraste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iluminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oscurecer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Rotación.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"));

        rotacion.setMaximum(360);
        rotacion.setMinimum(-360);
        rotacion.setValue(0);
        rotacion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rotacion.setPreferredSize(new java.awt.Dimension(70, 23));
        rotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotacionStateChanged(evt);
            }
        });
        rotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rotacionFocusLost(evt);
            }
        });

        rotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosImagen/rotacion90.png"))); // NOI18N
        rotacion90.setToolTipText("");
        rotacion90.setPreferredSize(new java.awt.Dimension(23, 23));
        rotacion90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion90ActionPerformed(evt);
            }
        });

        rotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosImagen/rotacion180.png"))); // NOI18N
        rotacion180.setToolTipText("");
        rotacion180.setPreferredSize(new java.awt.Dimension(23, 23));
        rotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion180ActionPerformed(evt);
            }
        });

        rotacion270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosImagen/rotacion270.png"))); // NOI18N
        rotacion270.setToolTipText("");
        rotacion270.setPreferredSize(new java.awt.Dimension(23, 23));
        rotacion270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion270ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RotaciónLayout = new javax.swing.GroupLayout(Rotación);
        Rotación.setLayout(RotaciónLayout);
        RotaciónLayout.setHorizontalGroup(
            RotaciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RotaciónLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(rotacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(RotaciónLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(rotacion90, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rotacion180, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rotacion270, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );
        RotaciónLayout.setVerticalGroup(
            RotaciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RotaciónLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(rotacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(RotaciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rotacion180, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rotacion270, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rotacion90, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        Escala.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));

        aumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosImagen/aumentar.png"))); // NOI18N
        aumentar.setToolTipText("");
        aumentar.setPreferredSize(new java.awt.Dimension(23, 23));
        aumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentarActionPerformed(evt);
            }
        });
        Escala.add(aumentar);

        disminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosImagen/disminuir.png"))); // NOI18N
        disminuir.setToolTipText("");
        disminuir.setPreferredSize(new java.awt.Dimension(23, 23));
        disminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disminuirActionPerformed(evt);
            }
        });
        Escala.add(disminuir);

        Brillo.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));

        brillo.setMaximum(255);
        brillo.setMinimum(-255);
        brillo.setToolTipText("");
        brillo.setValue(0);
        brillo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        brillo.setMaximumSize(new java.awt.Dimension(32767, 20));
        brillo.setMinimumSize(new java.awt.Dimension(90, 10));
        brillo.setName(""); // NOI18N
        brillo.setPreferredSize(new java.awt.Dimension(150, 20));
        brillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloStateChanged(evt);
            }
        });
        brillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloFocusLost(evt);
            }
        });

        javax.swing.GroupLayout BrilloLayout = new javax.swing.GroupLayout(Brillo);
        Brillo.setLayout(BrilloLayout);
        BrilloLayout.setHorizontalGroup(
            BrilloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BrilloLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(brillo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        BrilloLayout.setVerticalGroup(
            BrilloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BrilloLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(brillo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Umbralizacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Umbralización"));

        cUmbralizacionGris.setBorder(javax.swing.BorderFactory.createTitledBorder("Gris"));

        umbralGris.setMaximum(255);
        umbralGris.setValue(127);
        umbralGris.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        umbralGris.setMaximumSize(new java.awt.Dimension(32767, 20));
        umbralGris.setMinimumSize(new java.awt.Dimension(90, 10));
        umbralGris.setName(""); // NOI18N
        umbralGris.setPreferredSize(new java.awt.Dimension(150, 20));
        umbralGris.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                umbralGrisStateChanged(evt);
            }
        });
        umbralGris.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                umbralGrisFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                umbralGrisFocusLost(evt);
            }
        });

        javax.swing.GroupLayout cUmbralizacionGrisLayout = new javax.swing.GroupLayout(cUmbralizacionGris);
        cUmbralizacionGris.setLayout(cUmbralizacionGrisLayout);
        cUmbralizacionGrisLayout.setHorizontalGroup(
            cUmbralizacionGrisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cUmbralizacionGrisLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(umbralGris, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        cUmbralizacionGrisLayout.setVerticalGroup(
            cUmbralizacionGrisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cUmbralizacionGrisLayout.createSequentialGroup()
                .addComponent(umbralGris, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        cUmbralizacionColor.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));

        umbralColor.setMaximum(255);
        umbralColor.setToolTipText("");
        umbralColor.setValue(127);
        umbralColor.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        umbralColor.setMaximumSize(new java.awt.Dimension(32767, 20));
        umbralColor.setMinimumSize(new java.awt.Dimension(90, 10));
        umbralColor.setName(""); // NOI18N
        umbralColor.setPreferredSize(new java.awt.Dimension(150, 20));
        umbralColor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                umbralColorStateChanged(evt);
            }
        });
        umbralColor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                umbralColorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                umbralColorFocusLost(evt);
            }
        });

        javax.swing.GroupLayout cUmbralizacionColorLayout = new javax.swing.GroupLayout(cUmbralizacionColor);
        cUmbralizacionColor.setLayout(cUmbralizacionColorLayout);
        cUmbralizacionColorLayout.setHorizontalGroup(
            cUmbralizacionColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cUmbralizacionColorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(umbralColor, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        cUmbralizacionColorLayout.setVerticalGroup(
            cUmbralizacionColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cUmbralizacionColorLayout.createSequentialGroup()
                .addComponent(umbralColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout UmbralizacionLayout = new javax.swing.GroupLayout(Umbralizacion);
        Umbralizacion.setLayout(UmbralizacionLayout);
        UmbralizacionLayout.setHorizontalGroup(
            UmbralizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UmbralizacionLayout.createSequentialGroup()
                .addComponent(cUmbralizacionGris, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cUmbralizacionColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );
        UmbralizacionLayout.setVerticalGroup(
            UmbralizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UmbralizacionLayout.createSequentialGroup()
                .addGroup(UmbralizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cUmbralizacionGris, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cUmbralizacionColor, javax.swing.GroupLayout.PREFERRED_SIZE, 53, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout contenedorImagenLayout = new javax.swing.GroupLayout(contenedorImagen);
        contenedorImagen.setLayout(contenedorImagenLayout);
        contenedorImagenLayout.setHorizontalGroup(
            contenedorImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorImagenLayout.createSequentialGroup()
                .addComponent(Escala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Contraste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Rotación, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Brillo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Umbralizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );
        contenedorImagenLayout.setVerticalGroup(
            contenedorImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorImagenLayout.createSequentialGroup()
                .addGroup(contenedorImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Umbralizacion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Brillo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Rotación, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Contraste, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Escala, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        herramientasImagen.add(contenedorImagen);

        barraHerramientas.addTab("Imagen", herramientasImagen);

        panel_inferior.add(barraHerramientas, java.awt.BorderLayout.CENTER);

        getContentPane().add(panel_inferior, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1098, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 372, Short.MAX_VALUE)
        );

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        panel_superior.setLayout(new java.awt.GridLayout(2, 2));

        herramientasGeneral.setFloatable(false);
        herramientasGeneral.setRollover(true);

        abrirMedio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/AbrirMedio.png"))); // NOI18N
        abrirMedio.setToolTipText("Abrir fichero multimedia");
        abrirMedio.setFocusable(false);
        abrirMedio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrirMedio.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrirMedio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirMedioActionPerformed(evt);
            }
        });
        herramientasGeneral.add(abrirMedio);

        grabarSonido2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosSonido/RecordPressed_24x24.png"))); // NOI18N
        grabarSonido2.setToolTipText("Grabar audio");
        grabarSonido2.setFocusable(false);
        grabarSonido2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        grabarSonido2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        grabarSonido2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarSonido2ActionPerformed(evt);
            }
        });
        herramientasGeneral.add(grabarSonido2);

        webcam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        webcam.setToolTipText("Abrir webcam");
        webcam.setFocusable(false);
        webcam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        webcam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        webcam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webcamActionPerformed(evt);
            }
        });
        herramientasGeneral.add(webcam);

        captura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capturar.png"))); // NOI18N
        captura.setToolTipText("Capturar ventana");
        captura.setFocusable(false);
        captura.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        captura.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        captura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capturaActionPerformed(evt);
            }
        });
        herramientasGeneral.add(captura);

        panel_superior.add(herramientasGeneral);

        herramientasFiguras.setRollover(true);

        grupo_herramientas_dibujo.add(punto);
        punto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Lapiz.gif"))); // NOI18N
        punto.setFocusable(false);
        punto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        punto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        punto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puntoActionPerformed(evt);
            }
        });
        herramientasFiguras.add(punto);

        grupo_herramientas_dibujo.add(linea);
        linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Linea.gif"))); // NOI18N
        linea.setFocusable(false);
        linea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineaActionPerformed(evt);
            }
        });
        herramientasFiguras.add(linea);

        grupo_herramientas_dibujo.add(rectángulo);
        rectángulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Rectangulo.gif"))); // NOI18N
        rectángulo.setFocusable(false);
        rectángulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectángulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectángulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectánguloActionPerformed(evt);
            }
        });
        herramientasFiguras.add(rectángulo);

        grupo_herramientas_dibujo.add(óvalo);
        óvalo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Ovalo.gif"))); // NOI18N
        óvalo.setFocusable(false);
        óvalo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        óvalo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        óvalo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                óvaloActionPerformed(evt);
            }
        });
        herramientasFiguras.add(óvalo);

        grupo_herramientas_dibujo.add(curva);
        curva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/curva2.gif"))); // NOI18N
        curva.setFocusable(false);
        curva.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        curva.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        curva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curvaActionPerformed(evt);
            }
        });
        herramientasFiguras.add(curva);

        grupo_herramientas_dibujo.add(rectanguloRedondeado);
        rectanguloRedondeado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/RectanguloRedondeado.gif"))); // NOI18N
        rectanguloRedondeado.setFocusable(false);
        rectanguloRedondeado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectanguloRedondeado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectanguloRedondeado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectanguloRedondeadoActionPerformed(evt);
            }
        });
        herramientasFiguras.add(rectanguloRedondeado);

        panel_superior.add(herramientasFiguras);

        getContentPane().add(panel_superior, java.awt.BorderLayout.NORTH);

        Archivo.setText("Archivo");

        nuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/NuevoBoceto.GIF"))); // NOI18N
        nuevo.setText("Nuevo");
        nuevo.setToolTipText("Nueva ventana de dibujo");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });
        Archivo.add(nuevo);

        abrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrir.setText("Abrir");
        abrir.setToolTipText("Abrir fichero");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        Archivo.add(abrir);

        guardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Guardar.gif"))); // NOI18N
        guardar.setText("Guardar");
        guardar.setToolTipText("Guardar fichero");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        Archivo.add(guardar);

        grabarSonido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosSonido/RecordPressed_24x24.png"))); // NOI18N
        grabarSonido.setText("Grabar");
        grabarSonido.setToolTipText("Grabar audio");
        grabarSonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarSonidoActionPerformed(evt);
            }
        });
        Archivo.add(grabarSonido);

        camara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        camara.setText("Cámara");
        camara.setToolTipText("Abrir webcam");
        camara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camaraActionPerformed(evt);
            }
        });
        Archivo.add(camara);

        Menu.add(Archivo);

        Ver.setText("Ver");

        verDibujo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        verDibujo.setSelected(true);
        verDibujo.setText("Ver barra de dibujo inferior");
        verDibujo.setToolTipText("Ver barra de dibujo inferior");
        verDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verDibujoActionPerformed(evt);
            }
        });
        Ver.add(verDibujo);

        verImagen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        verImagen.setText("Ver barra de imagen inferior");
        verImagen.setToolTipText("Ver barra de tratamiento de imágenes");
        verImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verImagenActionPerformed(evt);
            }
        });
        Ver.add(verImagen);

        Menu.add(Ver);

        Imagen.setText("Imagen");

        duplicar.setText("Duplicar");
        duplicar.setToolTipText("Duplicar imagen");
        duplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicarActionPerformed(evt);
            }
        });
        Imagen.add(duplicar);
        Imagen.add(separadorImagen);

        negativo.setText("Negativo");
        negativo.setToolTipText("Transforma a negativo la imagen");
        negativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativoActionPerformed(evt);
            }
        });
        Imagen.add(negativo);

        nivelesGris.setText("Escala de grises");
        nivelesGris.setToolTipText("Transforma a escala de grises");
        nivelesGris.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nivelesGrisActionPerformed(evt);
            }
        });
        Imagen.add(nivelesGris);

        Filtro.setText("Filtro");

        media.setText("Media");
        media.setToolTipText("Emborronamiento medio");
        media.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediaActionPerformed(evt);
            }
        });
        Filtro.add(media);

        binomial.setText("Binomial");
        binomial.setToolTipText("Emborronamiento binomial");
        binomial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binomialActionPerformed(evt);
            }
        });
        Filtro.add(binomial);

        enfoque.setText("Enfoque");
        enfoque.setToolTipText("Enfocar imagen");
        enfoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enfoqueActionPerformed(evt);
            }
        });
        Filtro.add(enfoque);

        relieve.setText("Relieve");
        relieve.setToolTipText("Aumenta el relieve de la imagen");
        relieve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relieveActionPerformed(evt);
            }
        });
        Filtro.add(relieve);

        laplaciano.setText("Laplaciano");
        laplaciano.setToolTipText("Detección de bordes Laplaciano");
        laplaciano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laplacianoActionPerformed(evt);
            }
        });
        Filtro.add(laplaciano);

        sobel.setText("Sobel");
        sobel.setToolTipText("Setección de bordes Sobel");
        sobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobelActionPerformed(evt);
            }
        });
        Filtro.add(sobel);

        contornoLapiz.setText("Contorno a lápiz");
        contornoLapiz.setToolTipText("Setección de bordes Sobel");
        contornoLapiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contornoLapizActionPerformed(evt);
            }
        });
        Filtro.add(contornoLapiz);

        entramadoLapiz.setText("Entramado a lápiz");
        entramadoLapiz.setToolTipText("Setección de bordes Sobel");
        entramadoLapiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entramadoLapizActionPerformed(evt);
            }
        });
        Filtro.add(entramadoLapiz);

        Imagen.add(Filtro);

        Menu.add(Imagen);

        Ayuda.setText("Ayuda");

        acercaDe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/informacion.png"))); // NOI18N
        acercaDe.setText("Acerca de...");
        acercaDe.setToolTipText("Información sobre la aplicación");
        acercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acercaDeActionPerformed(evt);
            }
        });
        Ayuda.add(acercaDe);

        Menu.add(Ayuda);

        setJMenuBar(Menu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void negroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negroActionPerformed
        Lienzo.setColor(Color.BLACK);
        updateColors(Color.BLACK);
        repaint();
    }//GEN-LAST:event_negroActionPerformed

    private void rojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rojoActionPerformed
        Lienzo.setColor(Color.RED);
        updateColors(Color.RED);
        repaint();
    }//GEN-LAST:event_rojoActionPerformed

    private void azulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_azulActionPerformed
        Lienzo.setColor(Color.BLUE);
        updateColors(Color.BLUE);
        repaint();
    }//GEN-LAST:event_azulActionPerformed

    private void verdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verdeActionPerformed
        Lienzo.setColor(Color.GREEN);
        updateColors(Color.GREEN);
        repaint();
    }//GEN-LAST:event_verdeActionPerformed

    private void blancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blancoActionPerformed
        Lienzo.setColor(Color.WHITE);
        updateColors(Color.WHITE);
        repaint();
    }//GEN-LAST:event_blancoActionPerformed

    private void amarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amarilloActionPerformed
        Lienzo.setColor(Color.YELLOW);
        updateColors(Color.YELLOW);
        repaint();
    }//GEN-LAST:event_amarilloActionPerformed

    private void puntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puntoActionPerformed
        Lienzo.setSelect(Lienzo.PUNTO);
        pie.setText("Punto");
    }//GEN-LAST:event_puntoActionPerformed

    private void lineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaActionPerformed
        Lienzo.setSelect(Lienzo.LINEA);
        pie.setText("Línea");
    }//GEN-LAST:event_lineaActionPerformed

    private void rectánguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectánguloActionPerformed
        Lienzo.setSelect(Lienzo.RECTANGULO);
        pie.setText("Rectángulo");
    }//GEN-LAST:event_rectánguloActionPerformed

    private void óvaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_óvaloActionPerformed
        Lienzo.setSelect(Lienzo.ELIPSE);
        pie.setText("Elipse");
    }//GEN-LAST:event_óvaloActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        
        RFileFilter filtroImagen= new RFileFilter("Archivos de imagen");
        dlg.addChoosableFileFilter(filtroImagen);
        RFileFilter filtroSonido= new RFileFilter("Archivos de audio");
        dlg.addChoosableFileFilter(filtroSonido);
        RFileFilter filtroVideo= new RFileFilter("Archivos de vídeo");
        dlg.addChoosableFileFilter(filtroVideo);
        dlg.setAcceptAllFileFilterUsed(false);
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            File f = dlg.getSelectedFile();

            //Ventana Imagen
            if(dlg.getFileFilter()==filtroImagen){
                try{
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna();
                    vi.getLienzo().setImageSource(img);
                    vi.setTitle(f.getName());
                    vi.setLocation(posVentana());
                    Point2D pos = posVentana();
                    vi.setBounds((int)pos.getX(),(int)pos.getY(), img.getWidth()+20, img.getHeight()+40);
                    this.escritorio.add(vi);
                    
                    vi.setVisible(true);
                    
                }catch(Exception ex){
                    System.err.println("Error al leer la imagen");
                }
                barraHerramientas.setSelectedIndex(1);
                verImagen.setSelected(true);
                verImagenActionPerformed(evt);
               
                
            //Ventana Sonido    
            }else if(dlg.getFileFilter()==filtroSonido){
                try{
                    VentanaInternaSonido vi;
                    vi = VentanaInternaSonido.getInstance(f);
                    vi.setTitle(f.getName());
                    vi.setLocation(posVentana());
                    this.escritorio.add(vi);
                    vi.setVisible(true);
                }catch(Exception ex){
                    System.err.println("Error al leer el audio");
                }
            
            //Ventana Vídeo
            }else if(dlg.getFileFilter()==filtroVideo){
                try{
                    VentanaInternaVideo vi;
                    vi = VentanaInternaVideo.getInstance(f);
                    vi.setTitle(f.getName());
                    vi.setBounds((int)posVentana().getX(),(int)posVentana().getY(),300,300);
                    this.escritorio.add(vi);
                    vi.setVisible(true);
                }catch(Exception ex){
                    System.err.println("Error al leer el vídeo");
                }
            }
        }
        

    }//GEN-LAST:event_abrirActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
                BufferedImage image = vi.getLienzo().getImageSource();
                image = vi.getLienzo().guardarShape(image);
                ImageIO.write(image, getExtension(f), f);
            }catch(Exception ex){
                System.err.println("Error al guardar la imagen");
            }
        }
    }//GEN-LAST:event_guardarActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        JTextField w= new JTextField("600");
        JTextField h= new JTextField("400");
        JFileChooser dlg = new JFileChooser();        

        Object[] componentes ={
            "Indique el ancho (pixel).",w,
            "Indique el alto (pixel).",h
        };
        JOptionPane.showConfirmDialog(this, componentes,"Introduzca el tamaño",
                JOptionPane.DEFAULT_OPTION);
                       
        VentanaInterna vi = new VentanaInterna();
        vi.setTitle("Nueva");
        vi.setSize(Integer.parseInt(w.getText()), Integer.parseInt(h.getText()));


        vi.setLocation(posVentana());
        this.escritorio.add(vi);
        vi.setVisible(true);
    }//GEN-LAST:event_nuevoActionPerformed

    private void grosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorStateChanged
        int x =  (int) this.grosor.getValue();
        Lienzo.setGrosor(x);
        repaint();
    }//GEN-LAST:event_grosorStateChanged
   
    private void editarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_editarStateChanged
        Lienzo.setEditar(this.editar.isSelected());
    }//GEN-LAST:event_editarStateChanged

    
    
    private void rotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion90ActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       if (vi != null) {
           
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());       
            if(vi.getLienzo().getImageSource()!=null){             
                AffineTransform at = AffineTransform.getRotateInstance(
                                        Math.toRadians(90.0), 
                                        vi.getLienzo().getImage().getWidth()/2,
                                        vi.getLienzo().getImage().getWidth()/2);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at,
                                                AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( vi.getLienzo().getImage() , null);
                        vi.getLienzo().setImageSource(imgdest);
                        vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println("Error rotación 90 grados");
                }
       
            }
       }   
    }//GEN-LAST:event_rotacion90ActionPerformed

    private void rotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180ActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       if (vi != null) {
           
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());       
            if(vi.getLienzo().getImageSource()!=null){             
                AffineTransform at = AffineTransform.getRotateInstance(
                                        Math.toRadians(180.0), 
                                        vi.getLienzo().getImage().getWidth()/2,
                                        vi.getLienzo().getImage().getWidth()/2);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at,
                                                AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( vi.getLienzo().getImage() , null);
                        vi.getLienzo().setImageSource(imgdest);
                        vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println("Error rotación 180 grados");
                }
       
            }
       }   
    }//GEN-LAST:event_rotacion180ActionPerformed

    private void rotacion270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion270ActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       if (vi != null) {
           
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());       
            if(vi.getLienzo().getImageSource()!=null){             
                AffineTransform at = AffineTransform.getRotateInstance(
                                        Math.toRadians(270.0), 
                                        vi.getLienzo().getImage().getWidth()/2,
                                        vi.getLienzo().getImage().getWidth()/2);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at,
                                                AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( vi.getLienzo().getImage() , null);
                        vi.getLienzo().setImageSource(imgdest);
                        vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println("Error rotación 270 grados");
                }
            }
       }   
    }//GEN-LAST:event_rotacion270ActionPerformed

    private void aumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       if (vi != null) {
           
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());       
            if(vi.getLienzo().getImageSource()!=null){             
                AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at,
                                                AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( vi.getLienzo().getImage() , null);
                        vi.getLienzo().setImageSource(imgdest);
                        vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println("Error aumentar");
                }
       
            }
       }
    }//GEN-LAST:event_aumentarActionPerformed

    private void disminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disminuirActionPerformed
          VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       if (vi != null) {
           
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());       
            if(vi.getLienzo().getImageSource()!=null){             
                AffineTransform at = AffineTransform.getScaleInstance(0.75,0.75);
                try{
                    AffineTransformOp atop = new AffineTransformOp(at,
                                                AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( vi.getLienzo().getImage() , null);
                        vi.getLienzo().setImageSource(imgdest);
                        vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println("Error dismunir");
                }
       
            }
       }
    }//GEN-LAST:event_disminuirActionPerformed

    private void rotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotacionStateChanged
            
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       if (vi != null) {      
            if(vi.getLienzo().getImageSource()!=null){             
                try{
                    AffineTransform at = AffineTransform.getRotateInstance(
                        Math.toRadians(rotacion.getValue()), 
                        vi.getLienzo().getImageSource().getWidth()/2,
                        vi.getLienzo().getImageSource().getWidth()/2);
                    AffineTransformOp atop = new AffineTransformOp(at,
                                                AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( vi.getLienzo().getImageSource() , null);
                        vi.getLienzo().setImage(imgdest);
                        vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println("Error rotación con slider");
                }
       
            }
       }  
    }//GEN-LAST:event_rotacionStateChanged

    private void rotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionFocusLost
        /*vi.getLienzo().setImageSource(vi.getLienzo().getImage());
        brillo.setValue(0);*/
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        vi.getLienzo().setImageSource(vi.getLienzo().getImage());
        rotacion.setValue(0);
    }//GEN-LAST:event_rotacionFocusLost

    private void sobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobelActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) { 
          BufferedImage imgSource = vi.getLienzo().getImage(); 
          if(imgSource!=null){ 
            try{
               SobelOp so = new SobelOp();              
               //sm.image.SobelOp so2 = new sm.image.SobelOp();
               BufferedImage imgdest = so.filter(imgSource, null); 
               vi.getLienzo().setImage(imgdest); 
               vi.getLienzo().repaint(); 
            } catch(IllegalArgumentException e){ 
               System.err.println(e.getLocalizedMessage()); 
            } 
          } 
        }
    }//GEN-LAST:event_sobelActionPerformed

    private void brilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusLost
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        vi.getLienzo().setImageSource(vi.getLienzo().getImage());
        brillo.setValue(0);
    }//GEN-LAST:event_brilloFocusLost

    private void brilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusGained

    }//GEN-LAST:event_brilloFocusGained

    private void brilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            if(vi.getLienzo().getImageSource()!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, brillo.getValue(), null);
                    BufferedImage imgdest = rop.filter(vi.getLienzo().getImageSource(), null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_brilloStateChanged

    private void oscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecerActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());
            //Si no es RGB convertimos a RGB
            if(vi.getLienzo().getImageSource().getType()!= BufferedImage.TYPE_INT_RGB){
                //System.out.println("No es RGB!!!!!");
                BufferedImage img;
                img = new BufferedImage(
                    vi.getLienzo().getImageSource().getWidth(),
                    vi.getLienzo().getImageSource().getHeight(),
                    BufferedImage.TYPE_INT_RGB);
                Graphics2D g2d= img.createGraphics();
                g2d.drawImage(vi.getLienzo().getImageSource(), 0, 0, null);
                vi.getLienzo().setImageSource(img);
            }

            if(vi.getLienzo().getImageSource()!=null){
                LookupTable lt;
                lt= LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
                try{
                    LookupOp lop = new LookupOp(lt,null);

                    BufferedImage imgdest = lop.filter( vi.getLienzo().getImage() , null);
                    vi.getLienzo().setImageSource(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println("Error oscurecer");
                }
            }
        }
    }//GEN-LAST:event_oscurecerActionPerformed

    private void iluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());
            //Si no es RGB convertimos a RGB
            if(vi.getLienzo().getImageSource().getType()!= BufferedImage.TYPE_INT_RGB){
                BufferedImage img;
                img = new BufferedImage(
                    vi.getLienzo().getImageSource().getWidth(),
                    vi.getLienzo().getImageSource().getHeight(),
                    BufferedImage.TYPE_INT_RGB);
                Graphics2D g2d= img.createGraphics();
                g2d.drawImage(vi.getLienzo().getImageSource(), 0, 0, null);
                vi.getLienzo().setImageSource(img);
            }

            if(vi.getLienzo().getImageSource()!=null){
                LookupTable lt;
                lt= LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
                try{
                    LookupOp lop = new LookupOp(lt,null);

                    BufferedImage imgdest = lop.filter( vi.getLienzo().getImage() , null);
                    vi.getLienzo().setImageSource(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println("Error iluminar");
                }

            }
        }
    }//GEN-LAST:event_iluminarActionPerformed

    private void contrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());

            //Si no es RGB convertimos a RGB
            if(vi.getLienzo().getImageSource().getType()!= BufferedImage.TYPE_INT_RGB){
                //System.out.println("No es RGB!!!!!");
                BufferedImage img;
                img = new BufferedImage(
                    vi.getLienzo().getImageSource().getWidth(),
                    vi.getLienzo().getImageSource().getHeight(),
                    BufferedImage.TYPE_INT_RGB);
                Graphics2D g2d= img.createGraphics();
                g2d.drawImage(vi.getLienzo().getImageSource(), 0, 0, null);
                vi.getLienzo().setImageSource(img);
            }

            if(vi.getLienzo().getImageSource()!=null){
                LookupTable lt;
                lt= LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                try{
                    LookupOp lop = new LookupOp(lt,null);

                    BufferedImage imgdest = lop.filter( vi.getLienzo().getImage() , null);
                    vi.getLienzo().setImageSource(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println("Error contraste");
                }
            }
        }
    }//GEN-LAST:event_contrasteActionPerformed

    private void colorRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorRellenoActionPerformed
        Lienzo.setSelectColor(RELLENO);
    }//GEN-LAST:event_colorRellenoActionPerformed

    private void colorBordeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBordeActionPerformed
        Lienzo.setSelectColor(BORDE);
    }//GEN-LAST:event_colorBordeActionPerformed

    private void coloresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coloresActionPerformed
        Color c = JColorChooser.showDialog(this, "Seleccion color" , Color.white);
        updateColors(c);
        Lienzo.setColor(c);
    }//GEN-LAST:event_coloresActionPerformed

    private void curvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curvaActionPerformed
        Lienzo.setSelect(Lienzo.CURVA);
        pie.setText("Curva con punto de control.");
    }//GEN-LAST:event_curvaActionPerformed

    private void estiloTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estiloTrazoActionPerformed
        int x = estiloTrazo.getSelectedIndex();
        System.out.println("-"+x);
        switch(x){
            case 0: Lienzo.setDiscontinuo(false);break;
            case 1: Lienzo.setDiscontinuo(true);break;
            default: Lienzo.setDiscontinuo(false);break;
        }
    }//GEN-LAST:event_estiloTrazoActionPerformed

    private void rellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenoActionPerformed
        int x = relleno.getSelectedIndex();
        switch(x){
            case 0:
                Lienzo.setRelleno(false);
                break;
            case 1: 
                Lienzo.setRelleno(true);
                break;
            case 2:
                Lienzo.setDegradado(DEGRADADOH);
                break;
            case 3:
                Lienzo.setDegradado(DEGRADADOV);
                break;
                
            default: Lienzo.setRelleno(false);break;
        }
        repaint();
    }//GEN-LAST:event_rellenoActionPerformed

    private void verDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verDibujoActionPerformed
        if(verDibujo.isSelected()){
            barraHerramientas.setSelectedIndex(0);
            verImagen.setSelected(false);
        }
    }//GEN-LAST:event_verDibujoActionPerformed

    private void verImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verImagenActionPerformed
        if(verImagen.isSelected()){
            barraHerramientas.setSelectedIndex(1);
            verDibujo.setSelected(false);
        }
    }//GEN-LAST:event_verImagenActionPerformed

    private void mediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediaActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       if (vi != null) {
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());
            if(vi.getLienzo().getImageSource()!=null){
               try{
                Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                if(k!=null){
                        ConvolveOp cop = new ConvolveOp(k);
                        BufferedImage imgdest = cop.filter(vi.getLienzo().getImage(), null);
                        vi.getLienzo().setImageSource(imgdest);
                        vi.getLienzo().repaint();
                    }
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
       }
    }//GEN-LAST:event_mediaActionPerformed

    private void binomialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binomialActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       if (vi != null) {
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());
            if(vi.getLienzo().getImageSource()!=null){
               try{
                Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                if(k!=null){
                        ConvolveOp cop = new ConvolveOp(k);
                        BufferedImage imgdest = cop.filter(vi.getLienzo().getImage(), null);
                        vi.getLienzo().setImageSource(imgdest);
                        vi.getLienzo().repaint();
                    }
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
       }
    }//GEN-LAST:event_binomialActionPerformed

    private void enfoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enfoqueActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       if (vi != null) {
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());
            if(vi.getLienzo().getImageSource()!=null){
               try{
                Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                if(k!=null){
                        ConvolveOp cop = new ConvolveOp(k);
                        BufferedImage imgdest = cop.filter(vi.getLienzo().getImage(), null);
                        vi.getLienzo().setImageSource(imgdest);
                        vi.getLienzo().repaint();
                    }
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
       }
    }//GEN-LAST:event_enfoqueActionPerformed

    private void relieveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relieveActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       if (vi != null) {
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());
            if(vi.getLienzo().getImageSource()!=null){
               try{
                Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                if(k!=null){
                        ConvolveOp cop = new ConvolveOp(k);
                        BufferedImage imgdest = cop.filter(vi.getLienzo().getImage(), null);
                        vi.getLienzo().setImageSource(imgdest);
                        vi.getLienzo().repaint();
                    }
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
       }
    }//GEN-LAST:event_relieveActionPerformed

    private void laplacianoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laplacianoActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage(); 
            if(imgSource!=null){ 
              try{
                 SobelOp so = new SobelOp();              
                 BufferedImage imgdest = so.filter(imgSource, null); 
                 vi.getLienzo().setImage(imgdest); 
                 vi.getLienzo().repaint(); 
              } catch(IllegalArgumentException e){ 
                 System.err.println(e.getLocalizedMessage()); 
              } 
            }
       }
    }//GEN-LAST:event_laplacianoActionPerformed

    private void rectanguloRedondeadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloRedondeadoActionPerformed
        Lienzo.setSelect(Lienzo.RECTANGULORED);
        pie.setText("Rectángulo redondeado");
    }//GEN-LAST:event_rectanguloRedondeadoActionPerformed

    private void duplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicarActionPerformed
              
        //Guardar imagen
        BufferedImage image=null;
        try{
            VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
            image = vi.getLienzo().getImageSource();
            //image = vi.getLienzo().guardarShape(image);
        }catch(Exception ex){
            System.err.println("Error al leer la imagen");
        }
        //Abrir imagen
        if(image!=null){
            try{
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo().setImageSource(image);
                this.escritorio.add(vi);
                vi.setVisible(true);
            }catch(Exception ex){
            System.err.println("Error al duplicar la imagen");
            }
        }       
        /*
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        BufferedImage image = new BufferedImage(vi.getLienzo().getImageSource().getHeight(),
                                    vi.getLienzo().getImageSource().getHeight(),
                                    vi.getLienzo().getImageSource().getType());
        image.setData(vi.getLienzo().getImageSource().getRaster());
        VentanaInterna vi2 = new VentanaInterna();
        vi2.getLienzo().setImageSource(image);
        this.escritorio.add(vi2);
        vi2.setVisible(true);
        */
    }//GEN-LAST:event_duplicarActionPerformed

    private void umbralGrisStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_umbralGrisStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            if(vi.getLienzo().getImageSource()!=null){
                try{
                    BufferedImage imgdest = new BufferedImage(
                            vi.getLienzo().getImageSource().getWidth(), 
                            vi.getLienzo().getImageSource().getHeight(), 
                            vi.getLienzo().getImageSource().getType());
                    ThresholdOp top = new ThresholdOp(umbralGris.getValue());
                    top.filterGreyLevel(vi.getLienzo().getImageSource(), imgdest);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_umbralGrisStateChanged

    private void umbralGrisFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralGrisFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_umbralGrisFocusGained

    private void umbralGrisFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralGrisFocusLost
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         vi.getLienzo().setImageSource(vi.getLienzo().getImage());
         umbralGris.setValue(0);
    }//GEN-LAST:event_umbralGrisFocusLost

    private void negativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());

            //Si no es RGB convertimos a RGB
            if(vi.getLienzo().getImageSource().getType()!= BufferedImage.TYPE_INT_RGB){
                //System.out.println("No es RGB!!!!!");
                BufferedImage img;
                img = new BufferedImage(
                    vi.getLienzo().getImageSource().getWidth(),
                    vi.getLienzo().getImageSource().getHeight(),
                    BufferedImage.TYPE_INT_RGB);
                Graphics2D g2d= img.createGraphics();
                g2d.drawImage(vi.getLienzo().getImageSource(), 0, 0, null);
                vi.getLienzo().setImageSource(img);
            }

            if(vi.getLienzo().getImageSource()!=null){
                LookupTable lt;
                lt= LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
                try{
                    LookupOp lop = new LookupOp(lt,null);

                    BufferedImage imgdest = lop.filter( vi.getLienzo().getImage() , null);
                    vi.getLienzo().setImageSource(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    System.err.println("Error contraste");
                }
            }
        }
    }//GEN-LAST:event_negativoActionPerformed

    private void umbralColorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_umbralColorStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            if(vi.getLienzo().getImageSource()!=null){
                try{
                    //Propia
                    UmbralizacionOp um = new UmbralizacionOp(umbralColor.getValue());
                    BufferedImage imgdest = um.filter(vi.getLienzo().getImageSource(), null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();       
                    
                    //ThresholdOp
                    /*BufferedImage imgdest = new BufferedImage(
                            vi.getLienzo().getImageSource().getWidth(), 
                            vi.getLienzo().getImageSource().getHeight(), 
                            vi.getLienzo().getImageSource().getType());
                    ThresholdOp top = new ThresholdOp(umbralColor.getValue());
                    top.setThreshold(Color.RED, umbralColor.getValue());
                    top.filterColor(vi.getLienzo().getImageSource(), imgdest);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();*/
                
        
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_umbralColorStateChanged

    private void umbralColorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralColorFocusGained
        
    }//GEN-LAST:event_umbralColorFocusGained

    private void umbralColorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralColorFocusLost
         VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         vi.getLienzo().setImageSource(vi.getLienzo().getImage());
         umbralColor.setValue(0);
    }//GEN-LAST:event_umbralColorFocusLost

    private void nivelesGrisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nivelesGrisActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            vi.getLienzo().setImageSource(vi.getLienzo().getImage());

           

            if(vi.getLienzo().getImageSource()!=null){
                ICC_Profile ip;
               ip = ICC_Profile.getInstance(ColorSpace.CS_GRAY);
               ColorSpace cs = new ICC_ColorSpace(ip);
               ColorConvertOp ccop = new ColorConvertOp(cs,null);
               BufferedImage imgdest = ccop.filter(vi.getLienzo().getImageSource(),null);
               vi.getLienzo().setImageSource(imgdest);
            }
        }
        repaint();
    }//GEN-LAST:event_nivelesGrisActionPerformed

    private void acercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acercaDeActionPerformed
        JOptionPane.showMessageDialog(null,"RPaint2D\n"
                + "Versión:  v1.0.1\nAutor:      Rogelio Gil García",
                "Sistemas Multimedia 2013-2014",JOptionPane.DEFAULT_OPTION);
    }//GEN-LAST:event_acercaDeActionPerformed

    private void grabarSonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarSonidoActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();               
                VentanaInternaGrabador vi = new VentanaInternaGrabador(f);
                this.escritorio.add(vi);
                vi.setLocation(posVentana());
                vi.setVisible(true);
            }catch(Exception ex){
            System.err.println("Error al leer el audio");
            }
        }
        barraHerramientas.setSelectedIndex(1);
        verImagen.setSelected(true);
        verImagenActionPerformed(evt);
    }//GEN-LAST:event_grabarSonidoActionPerformed

    private void camaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camaraActionPerformed
           try{               
                VentanaInternaCamara vi;
                vi = VentanaInternaCamara.getInstance();
                vi.setLocation(posVentana());
                vi.setBounds(50,30,300,300);
                this.escritorio.add(vi);
                vi.setVisible(true);
            }catch(Exception ex){
                System.err.println("Error al acceder a la cámara.");
                JOptionPane.showMessageDialog(null,"No se pudo acceder a la webcam","Error",JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_camaraActionPerformed

    private void abrirMedioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMedioActionPerformed
        abrirActionPerformed(evt);
    }//GEN-LAST:event_abrirMedioActionPerformed

    private void grabarSonido2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarSonido2ActionPerformed
        grabarSonidoActionPerformed(evt);
    }//GEN-LAST:event_grabarSonido2ActionPerformed

    private void webcamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webcamActionPerformed
        camaraActionPerformed(evt);
    }//GEN-LAST:event_webcamActionPerformed

    private void capturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capturaActionPerformed
        VentanaInternaVideo vv =null;
        VentanaInternaCamara vc =null;
        VentanaInterna vi = new VentanaInterna();
        int dx;
        if(escritorio.getSelectedFrame() instanceof VentanaInternaVideo){
            vv = (VentanaInternaVideo) escritorio.getSelectedFrame();
            vi.getLienzo().setImageSource(vv.getFrame());
            vi.setBounds(vv.getBounds());
            dx = vv.getWidth();
        }else{
            vc = (VentanaInternaCamara) escritorio.getSelectedFrame();
            vi.getLienzo().setImageSource(vc.getFrame());
            vi.setBounds(vc.getBounds());
            dx = vc.getWidth();
        }
        vi.setTitle("Captura");
        vi.setLocation((int)posVentana().getX()+dx, 
                (int)posVentana().getY()-40);
        vi.setVisible(true);
        this.escritorio.add(vi);
    }//GEN-LAST:event_capturaActionPerformed

    private void contornoLapizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contornoLapizActionPerformed
        sobelActionPerformed(evt);
        negativoActionPerformed(evt);
    }//GEN-LAST:event_contornoLapizActionPerformed

    private void entramadoLapizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entramadoLapizActionPerformed
        sobelActionPerformed(evt);
        relieveActionPerformed(evt);
        relieveActionPerformed(evt);
        negativoActionPerformed(evt);
    }//GEN-LAST:event_entramadoLapizActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Archivo;
    private javax.swing.JMenu Ayuda;
    private javax.swing.JPanel Brillo;
    private javax.swing.JPanel Colores;
    private javax.swing.JPanel Contraste;
    private javax.swing.JPanel Escala;
    private javax.swing.JMenu Filtro;
    private javax.swing.JMenu Imagen;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JPanel Rotación;
    private javax.swing.JPanel Umbralizacion;
    private javax.swing.JMenu Ver;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JButton abrirMedio;
    private javax.swing.JMenuItem acercaDe;
    private javax.swing.JButton amarillo;
    private javax.swing.JButton aumentar;
    private javax.swing.JButton azul;
    private javax.swing.JTabbedPane barraHerramientas;
    private javax.swing.JMenuItem binomial;
    private javax.swing.JButton blanco;
    private javax.swing.JSlider brillo;
    private javax.swing.JPanel cUmbralizacionColor;
    private javax.swing.JPanel cUmbralizacionGris;
    private javax.swing.JMenuItem camara;
    private javax.swing.JButton captura;
    private javax.swing.JButton colorBorde;
    private javax.swing.JButton colorRelleno;
    private javax.swing.JLayeredPane colorRellenoBorde;
    private javax.swing.JButton colores;
    private javax.swing.JPanel contenedorDibujo;
    private javax.swing.JPanel contenedorImagen;
    private javax.swing.JPanel contenedorRelleno;
    private javax.swing.JMenuItem contornoLapiz;
    private javax.swing.JButton contraste;
    private javax.swing.JToggleButton curva;
    private javax.swing.JButton disminuir;
    private javax.swing.JMenuItem duplicar;
    private javax.swing.JCheckBox editar;
    private javax.swing.JMenuItem enfoque;
    private javax.swing.JMenuItem entramadoLapiz;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JComboBox estiloTrazo;
    private javax.swing.JMenuItem grabarSonido;
    private javax.swing.JButton grabarSonido2;
    private javax.swing.JSpinner grosor;
    private javax.swing.ButtonGroup grupo_herramientas_dibujo;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JToolBar herramientasDibujo;
    private javax.swing.JToolBar herramientasFiguras;
    private javax.swing.JToolBar herramientasGeneral;
    private javax.swing.JToolBar herramientasImagen;
    private javax.swing.JButton iluminar;
    private javax.swing.JMenuItem laplaciano;
    private javax.swing.JToggleButton linea;
    private javax.swing.JPanel masColores;
    private javax.swing.JMenuItem media;
    private javax.swing.JMenuItem negativo;
    private javax.swing.JButton negro;
    private javax.swing.JMenuItem nivelesGris;
    private javax.swing.JMenuItem nuevo;
    private javax.swing.JPanel opciones_pintado;
    private javax.swing.JButton oscurecer;
    private javax.swing.JPanel panel_inferior;
    private javax.swing.JPanel panel_superior;
    private javax.swing.JTextField pie;
    private javax.swing.JToggleButton punto;
    private javax.swing.JToggleButton rectanguloRedondeado;
    private javax.swing.JToggleButton rectángulo;
    private javax.swing.JPanel recuadro_colores;
    private javax.swing.JMenuItem relieve;
    private javax.swing.JComboBox relleno;
    private javax.swing.JButton rojo;
    private javax.swing.JSlider rotacion;
    private javax.swing.JButton rotacion180;
    private javax.swing.JButton rotacion270;
    private javax.swing.JButton rotacion90;
    private javax.swing.JPopupMenu.Separator separadorImagen;
    private javax.swing.JMenuItem sobel;
    private javax.swing.JLabel textGrosor;
    private javax.swing.JPanel trazo;
    private javax.swing.JSlider umbralColor;
    private javax.swing.JSlider umbralGris;
    private javax.swing.JCheckBoxMenuItem verDibujo;
    private javax.swing.JCheckBoxMenuItem verImagen;
    private javax.swing.JButton verde;
    private javax.swing.JButton webcam;
    private javax.swing.JToggleButton óvalo;
    // End of variables declaration//GEN-END:variables
}
